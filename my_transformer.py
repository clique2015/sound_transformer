# -*- coding: utf-8 -*-
"""transformer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RrQR1IAgXywaLrodWiE01FsdsulHCw5E
"""

import torch
import torch.nn as nn
import math

class InputEmbeddings(nn.Module):

    def __init__(self, d_model: int, vocab_size: int) -> None:
        super().__init__()
        self.d_model = d_model
        self.vocab_size = vocab_size
        self.embedding = nn.Embedding(vocab_size, d_model)

    def forward(self, x):
        # (batch, seq_len) --> (batch, seq_len, d_model)
        # Multiply by sqrt(d_model) to scale the embeddings according to the paper
        return self.embedding(x) * math.sqrt(self.d_model)

# --- Test the embedding class ---

# Parameters
vocab_size = 10       # toy vocabulary size (e.g., 10 words)
d_model = 4           # embedding dimension
batch_size = 2
seq_len = 5

# Sample input: batch of token indices
sample_input = torch.tensor([
    [1, 2, 3, 4, 0],
    [2, 3, 1, 0, 4]
])  # Shape: (2, 5)

# Create the embedding layer
embedding_layer = InputEmbeddings(d_model=d_model, vocab_size=vocab_size)

# Forward pass
embedded = embedding_layer(sample_input)

print("Input Token IDs:\n", sample_input)
print("\nScaled Embeddings:\n", embedded)
print("\nShape of Output:", embedded.shape)

class PositionalEncoding(nn.Module):

    def __init__(self, d_model: int, seq_len: int, dropout: float) -> None:
        super().__init__()
        self.d_model = d_model
        self.seq_len = seq_len
        self.dropout = nn.Dropout(dropout)
        # Create a matrix of shape (seq_len, d_model)
        pe = torch.zeros(seq_len, d_model)
        # Create a vector of shape (seq_len)
        position = torch.arange(0, seq_len, dtype=torch.float).unsqueeze(1) # (seq_len, 1)
        # Create a vector of shape (d_model)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)) # (d_model / 2)
        # Apply sine to even indices
        pe[:, 0::2] = torch.sin(position * div_term) # sin(position * (10000 ** (2i / d_model))
        # Apply cosine to odd indices
        pe[:, 1::2] = torch.cos(position * div_term) # cos(position * (10000 ** (2i / d_model))
        # Add a batch dimension to the positional encoding
        pe = pe.unsqueeze(0) # (1, seq_len, d_model)
        # Register the positional encoding as a buffer
        self.register_buffer('pe', pe)

    def forward(self, x):
        x = x + (self.pe[:, :x.shape[1], :]).requires_grad_(False) # (batch, seq_len, d_model)
        return self.dropout(x)

dropout = 0.1
pos_encoding_layer = PositionalEncoding(d_model, seq_len, dropout)

position_encoded = pos_encoding_layer(embedded)   # Same shape

# Print shapes and output
print("\nWord Embeddings:\n", embedded)
print("\nAfter Positional Encoding:\n", position_encoded)

class LayerNormalization(nn.Module):

    def __init__(self, features: int, eps:float=10**-6) -> None:
        super().__init__()
        self.eps = eps
        self.alpha = nn.Parameter(torch.ones(features)) # alpha is a learnable parameter
        self.bias = nn.Parameter(torch.zeros(features)) # bias is a learnable parameter

    def forward(self, x):
        # x: (batch, seq_len, hidden_size)
         # Keep the dimension for broadcasting
        mean = x.mean(dim = -1, keepdim = True) # (batch, seq_len, 1)
        # Keep the dimension for broadcasting
        std = x.std(dim = -1, keepdim = True) # (batch, seq_len, 1)
        # eps is to prevent dividing by zero or when std is very small
        return self.alpha * (x - mean) / (std + self.eps) + self.bias

# Initialize LayerNormalization
layer_norm = LayerNormalization(features=4)

# Apply LayerNorm
normalized_output = layer_norm(position_encoded)

# Print input and output
print("Input:\n", position_encoded)
print("\nNormalized Output:\n", normalized_output)

class FeedForwardBlock(nn.Module):

    def __init__(self, d_model: int, d_ff: int, dropout: float) -> None:
        super().__init__()
        self.linear_1 = nn.Linear(d_model, d_ff) # w1 and b1
        self.dropout = nn.Dropout(dropout)
        self.linear_2 = nn.Linear(d_ff, d_model) # w2 and b2

    def forward(self, x):
        # (batch, seq_len, d_model) --> (batch, seq_len, d_ff) --> (batch, seq_len, d_model)
        return self.linear_2(self.dropout(torch.relu(self.linear_1(x))))

# Initialize the feedforward block
ff_block = FeedForwardBlock(d_model, d_model * 4, dropout)

# Set the model to eval mode to disable dropout randomness (for consistent output)
ff_block.eval()

# Forward pass
output = ff_block(normalized_output)

print("\nOutput:")
print(output)

class MultiHeadAttentionBlock(nn.Module):

    def __init__(self, d_model: int, h: int, dropout: float) -> None:
        super().__init__()
        self.d_model = d_model # Embedding vector size
        self.h = h # Number of heads
        # Make sure d_model is divisible by h
        #print(d_model, "dmodel and ", h, "h")
        c_model = d_model*4
        assert c_model % h == 0, "c_model is not divisible by h"

        self.d_k = c_model // h # Dimension of vector seen by each head
        self.w_q = nn.Linear(d_model, c_model, bias=False) # Wq
        self.w_k = nn.Linear(d_model, c_model, bias=False) # Wk
        self.w_v = nn.Linear(d_model, c_model, bias=False) # Wv
        self.w_o = nn.Linear(c_model, d_model, bias=False) # Wo
        self.dropout = nn.Dropout(dropout)

    @staticmethod
    def attention(query, key, value, mask, dropout: nn.Dropout):
        d_k = query.shape[-1]
        # Just apply the formula from the paper
        # (batch, h, seq_len, d_k) --> (batch, h, seq_len, seq_len)
        attention_scores = (query @ key.transpose(-2, -1)) / math.sqrt(d_k)
        if mask is not None:
            # Write a very low value (indicating -inf) to the positions where mask == 0
            attention_scores.masked_fill_(mask == 0, -1e9)
        attention_scores = attention_scores.softmax(dim=-1) # (batch, h, seq_len, seq_len) # Apply softmax
        if dropout is not None:
            attention_scores = dropout(attention_scores)
        # (batch, h, seq_len, seq_len) --> (batch, h, seq_len, d_k)
        # return attention scores which can be used for visualization
        return (attention_scores @ value), attention_scores

    def forward(self, q, k, v, mask):
        query = self.w_q(q) # (batch, seq_len, d_model) --> (batch, seq_len, d_model)
        key = self.w_k(k) # (batch, seq_len, d_model) --> (batch, seq_len, d_model)
        value = self.w_v(v) # (batch, seq_len, d_model) --> (batch, seq_len, d_model)

        # (batch, seq_len, d_model) --> (batch, seq_len, h, d_k) --> (batch, h, seq_len, d_k)
        query = query.view(query.shape[0], query.shape[1], self.h, self.d_k).transpose(1, 2)
        key = key.view(key.shape[0], key.shape[1], self.h, self.d_k).transpose(1, 2)
        value = value.view(value.shape[0], value.shape[1], self.h, self.d_k).transpose(1, 2)

        # Calculate attention
        x, self.attention_scores = MultiHeadAttentionBlock.attention(query, key, value, mask, self.dropout)

        # Combine all the heads together
        # (batch, h, seq_len, d_k) --> (batch, seq_len, h, d_k) --> (batch, seq_len, d_model)
        x = x.transpose(1, 2).contiguous().view(x.shape[0], -1, self.h * self.d_k)

        # Multiply by Wo
        # (batch, seq_len, d_model) --> (batch, seq_len, d_model)
        return self.w_o(x.float())

# Create attention block
num_heads = 2
dropout = 0.1

# Parameters
vocab_size = 10       # toy vocabulary size (e.g., 10 words)
d_model = 4           # embedding dimension
batch_size = 2
seq_len = 5

attention_block = MultiHeadAttentionBlock(d_model=d_model, h=num_heads, dropout=dropout)

# Forward pass
output = attention_block(output,output,output, mask=None)  # Self-attention: q = k = v = x

print("Input shape: ", output.shape)
print("Output shape:", output.shape)

class ResidualConnection(nn.Module):

        def __init__(self, features: int, dropout: float) -> None:
            super().__init__()
            self.dropout = nn.Dropout(dropout)
            self.norm = LayerNormalization(features)

        def forward(self, x, sublayer):
            return x + self.dropout(sublayer(self.norm(x)))

# Instantiate components
features=4
residual = ResidualConnection(features=4, dropout=0.1)
attention_block = MultiHeadAttentionBlock(d_model=d_model, h=num_heads, dropout=dropout)
sublayer = lambda x: attention_block(x, x, x, mask=None)

print("Input shape:", output.shape)
# Apply residual connection
output = residual(output, sublayer)


print("Output shape:", output.shape)
print("Output (with residual connection):\n", output)

class EncoderBlock(nn.Module):

    def __init__(self, features: int, self_attention_block: MultiHeadAttentionBlock, feed_forward_block: FeedForwardBlock, dropout: float) -> None:
        super().__init__()
        self.self_attention_block = self_attention_block
        self.feed_forward_block = feed_forward_block
        self.residual_connections = nn.ModuleList([ResidualConnection(features, dropout) for _ in range(2)])

    def forward(self, x, src_mask):
        x = self.residual_connections[0](x, lambda x: self.self_attention_block(x, x, x, src_mask))
        x = self.residual_connections[1](x, self.feed_forward_block)
        return x

src_mask = torch.ones(batch_size, 1, 1, seq_len)  # no masking

# Instantiate submodules
mha = MultiHeadAttentionBlock(d_model, num_heads, dropout)
ffn = FeedForwardBlock(d_model, d_ff=d_model*4, dropout=dropout)
encoder_block = EncoderBlock(d_model, mha, ffn, dropout)

print("Input shape:", output)
# Run forward pass
output = encoder_block(output, src_mask)
print("Output shape:", output)

class Encoder(nn.Module):

    def __init__(self, features: int, layers: nn.ModuleList) -> None:
        super().__init__()
        self.layers = layers
        self.norm = LayerNormalization(features)

    def forward(self, x, mask):
        for layer in self.layers:
            x = layer(x, mask)
        return self.norm(x)

num_layers = 6


layers = nn.ModuleList([encoder_block for _ in range(num_layers)])

# Create the Encoder
encoder = Encoder(features, layers)

# Forward pass
output = encoder(output, mask=None)

# Print results
print("Input shape:", output.shape)
print("Output shape:", output.shape)
print("Output:", output)

class DecoderBlock(nn.Module):

    def __init__(self, features: int, self_attention_block: MultiHeadAttentionBlock, cross_attention_block: MultiHeadAttentionBlock, feed_forward_block: FeedForwardBlock, dropout: float) -> None:
        super().__init__()
        self.self_attention_block = self_attention_block
        self.cross_attention_block = cross_attention_block
        self.feed_forward_block = feed_forward_block
        self.residual_connections = nn.ModuleList([ResidualConnection(features, dropout) for _ in range(3)])

    def forward(self, x, encoder_output, src_mask, tgt_mask):
        x = self.residual_connections[0](x, lambda x: self.self_attention_block(x, x, x, tgt_mask))
        x = self.residual_connections[1](x, lambda x: self.cross_attention_block(x, encoder_output, encoder_output, src_mask))
        x = self.residual_connections[2](x, self.feed_forward_block)
        return x

src_mask = torch.ones(batch_size, 1, 1, seq_len)  # no masking

# Instantiate submodules
mha = MultiHeadAttentionBlock(d_model, num_heads, dropout)
ffn = FeedForwardBlock(d_model, d_model*4, dropout)
ffn1 = FeedForwardBlock(d_model, d_model*4, dropout)
decoder_block = DecoderBlock(d_model, mha, mha, ffn, dropout)

print("Input shape:", output)
# Run forward pass
output = decoder_block(output,output, src_mask=None,  tgt_mask=None)
print("Output shape:", output)

class Decoder(nn.Module):

    def __init__(self, features: int, layers: nn.ModuleList) -> None:
        super().__init__()
        self.layers = layers
        self.norm = LayerNormalization(features)

    def forward(self, x, encoder_output, src_mask, tgt_mask):
        for layer in self.layers:
            x = layer(x, encoder_output, src_mask, tgt_mask)
        return self.norm(x)

num_layers = 6


layers_dec = nn.ModuleList([decoder_block for _ in range(num_layers)])

# Create the Encoder
decoder = Decoder(features, layers_dec)

# Forward pass
output = decoder(output,output, src_mask=None, tgt_mask=None)

# Print results
print("Input shape:", output.shape)
print("Output shape:", output.shape)
print("Output:", output)

class ProjectionLayer(nn.Module):

    def __init__(self, d_model, vocab_size) -> None:
        super().__init__()
        self.proj = nn.Linear(d_model, vocab_size)

    def forward(self, x) -> None:
        # (batch, seq_len, d_model) --> (batch, seq_len, vocab_size)
        return self.proj(x)

project = ProjectionLayer(d_model, vocab_size)

output = project(output)

# Print results
print("Output shape:", output.shape)
print("Output:", output)

class Transformer(nn.Module):

    def __init__(self, encoder: Encoder, 
                 decoder: Decoder, 
                 src_embed: InputEmbeddings, 
                 tgt_embed: InputEmbeddings, 
                 src_pos: PositionalEncoding, 
                 tgt_pos: PositionalEncoding, 
                 projection_layer: ProjectionLayer) -> None:
        super().__init__()
        self.encoder = encoder
        self.decoder = decoder
        self.src_embed = src_embed
        self.tgt_embed = tgt_embed
        self.src_pos = src_pos
        self.tgt_pos = tgt_pos
        self.projection_layer = projection_layer

    def encode(self, src, src_mask):
        # (batch, seq_len, d_model)
        src = self.src_embed(src).float()
        src = self.src_pos(src)
        return self.encoder(src, src_mask)

    def decode(self, encoder_output: torch.Tensor, src_mask: torch.Tensor, tgt: torch.Tensor, tgt_mask: torch.Tensor):
        # (batch, seq_len, d_model)
        tgt = self.tgt_embed(tgt)
        tgt = self.tgt_pos(tgt)
        return self.decoder(tgt, encoder_output, src_mask, tgt_mask)

    def project(self, x):
        # (batch, seq_len, vocab_size)
        return self.projection_layer(x)

embedding_layer = InputEmbeddings(d_model=d_model, vocab_size=vocab_size)
embedding_layer1 = InputEmbeddings(d_model=d_model, vocab_size=vocab_size)
pos_encoding_layer = PositionalEncoding(d_model, seq_len, dropout)
pos_encoding_layer1 = PositionalEncoding(d_model, seq_len, dropout)
projects = Transformer(encoder, decoder, embedding_layer, embedding_layer1, pos_encoding_layer, pos_encoding_layer1, project)

print("Output shape:", output.shape)
output = torch.randn(output.shape[0], output.shape[1], vocab_size)
print("Output shape:", output.shape)
#output = projects.project(output)
#projects.encoder = Encoder(features, layers)
#projects.encoder(features, layers)
#output =    projects.encode(output, src_mask=None)
 #, src_mask=None, tgt=None, tgt_mask=None)))

# Print results
print("Output shape:", output.shape)
print("Output:", output)

def build_transformer(src_vocab_size: int,
                     tgt_vocab_size: int, 
                     src_seq_len: int, 
                     tgt_seq_len: int, 
                     d_model: int=512, 
                     N: int=6, 
                     h: int=8, 
                     dropout: float=0.1, 
                     d_ff: int=2048) -> Transformer:
    # Create the embedding layers
    src_embed = InputEmbeddings(d_model, src_vocab_size)
    tgt_embed = InputEmbeddings(d_model, tgt_vocab_size)

    # Create the positional encoding layers
    src_pos = PositionalEncoding(d_model, src_seq_len, dropout)
    tgt_pos = PositionalEncoding(d_model, tgt_seq_len, dropout)

    # Create the encoder blocks
    encoder_blocks = []
    for _ in range(N):
        encoder_self_attention_block = MultiHeadAttentionBlock(d_model, h, dropout)
        feed_forward_block = FeedForwardBlock(d_model, d_ff, dropout)
        encoder_block = EncoderBlock(d_model, encoder_self_attention_block, feed_forward_block, dropout)
        encoder_blocks.append(encoder_block)

    # Create the decoder blocks
    decoder_blocks = []
    for _ in range(N):
        decoder_self_attention_block = MultiHeadAttentionBlock(d_model, h, dropout)
        decoder_cross_attention_block = MultiHeadAttentionBlock(d_model, h, dropout)
        feed_forward_block = FeedForwardBlock(d_model, d_ff, dropout)
        decoder_block = DecoderBlock(d_model, decoder_self_attention_block, decoder_cross_attention_block, feed_forward_block, dropout)
        decoder_blocks.append(decoder_block)

    # Create the encoder and decoder
    encoder = Encoder(d_model, nn.ModuleList(encoder_blocks))
    decoder = Decoder(d_model, nn.ModuleList(decoder_blocks))

    # Create the projection layer
    projection_layer = ProjectionLayer(d_model, tgt_vocab_size)

    # Create the transformer
    transformer = Transformer(encoder, decoder, src_embed, tgt_embed, src_pos, tgt_pos, projection_layer)

    # Initialize the parameters
    for p in transformer.parameters():
        if p.dim() > 1:
            nn.init.xavier_uniform_(p)

    return transformer